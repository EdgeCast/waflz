syntax = "proto2";
package waflz_pb;
import "request_info.proto";
//: ----------------------------------------------------------------------------
//: event
//: ----------------------------------------------------------------------------
message event {
        // -------------------------------------------------
        // modsecurity action
        // -------------------------------------------------
        enum action_t {
                ACTION_NONE               = 0;
                ACTION_DENY               = 1;
                ACTION_REDIRECT           = 2;
                ACTION_PROXY              = 3;
                ACTION_DROP               = 4;
                ACTION_ALLOW              = 5;
                ACTION_ALLOW_REQUEST      = 6;
                ACTION_ALLOW_PHASE        = 7;
                ACTION_PAUSE              = 8;
        }
        // -------------------------------------------------
        // challenge status
        // -------------------------------------------------
        enum chal_status_t {
                CHAL_STATUS_NONE = 0;
                CHAL_STATUS_NO_TOKEN = 1;
                CHAL_STATUS_IP_MISMATCH = 2;
                CHAL_STATUS_UA_MISMATCH = 3;
                CHAL_STATUS_TOKEN_EXPIRED = 4;
                CHAL_STATUS_TOKEN_CORRUPTED = 5;
                CHAL_STATUS_WRONG_ANSWER = 6;
        }
        // -------------------------------------------------
        // mirrors RULE_TYPE_X definitions in re.h        
        // -------------------------------------------------
        enum rule_type_t {
                RULE_TYPE_NORMAL = 0;
                RULE_TYPE_ACTION = 1;
                RULE_TYPE_MARKER = 2;
                RULE_TYPE_LUA = 3;
        }
        // -------------------------------------------------
        // var
        // -------------------------------------------------
        message var_t {
                optional bytes name = 1;
                optional bytes value = 2;
                optional string param = 3;
                optional bytes param_data = 4;
                optional bool is_negated = 5;
                optional bool is_counting = 6;
        }

        message timespec_t {
                optional uint32 sec  = 1;
                optional uint32 nsec = 2;
        }
        // -------------------------------------------------
        // Request specific
        // -------------------------------------------------
        optional waflz_pb.request_info req_info = 1;
        // -------------------------------------------------
        // msre_actionset entries
        // -------------------------------------------------
        optional uint32 rule_id = 2;
        optional uint32 rule_rev = 3;
        optional string rule_msg = 4;
        optional string rule_version = 5;
        optional uint32 rule_maturity = 6;
        optional uint32 rule_accuracy = 7;
        optional uint32 rule_severity = 8;
        optional uint32 rule_phase = 9;
        optional uint32 rule_arg_min = 10;
        optional uint32 rule_arg_max = 11;
        optional bool rule_is_chained = 12;
        optional uint32 rule_skip_count = 13;
        optional string rule_skip_after = 14;      
        optional action_t rule_intercept_action = 15;
        optional string rule_intercept_uri = 16;
        // -------------------------------------------------
        // TODO
        // -use http status enum???
        // optional http.status_t rule_intercept_status
        // -------------------------------------------------
        optional uint32 rule_intercept_status = 17;
        optional uint32 rule_intercept_pause = 18;
        optional uint32 rule_block = 19;
        // -------------------------------------------------
        // uint32 msre_rule entries
        // -------------------------------------------------
        repeated var_t rule_target = 30;
        optional string rule_op_name = 31;
        optional string rule_op_param = 32;
        optional bytes rule_op_param_data = 33;
        optional string rule_op_metadata = 34;
        optional bool rule_op_negated = 35;
        optional string rule_unparsed = 36;
        optional string rule_file = 37;
        optional uint32 rule_line = 38;
        optional rule_type_t rule_type = 39;
        optional string rule_regex_string = 40;
        optional string rule_replace_string = 41;
        //optional string rule_ip_matches = 42;
        repeated string rule_tag = 43;
        // -------------------------------------------------
        // request specific entries
        // -------------------------------------------------
        optional var_t matched_var = 50;
        optional uint32 total_anomaly_score = 52;
        optional uint32 total_sql_injection_score = 53;
        optional uint32 total_xss_score = 54;
        optional uint32 anomaly_score = 55;
        optional uint32 sql_injection_score = 56;
        optional uint32 xss_score = 57;
        optional uint32 paranoia_level = 58;
        // -------------------------------------------------
        // geoip fields
        // -------------------------------------------------
        optional string geoip_country_code2 = 70;
        optional string geoip_country_name = 71;
        optional string geoip_city_name = 72;
        optional string geoip_sd1_iso = 73;
        optional string geoip_sd2_iso = 74;
        optional string geoip_latitude = 75;
        optional string geoip_longitude = 76;
        // -------------------------------------------------
        // bot fields
        // -------------------------------------------------
        optional chal_status_t challenge_status = 80;
        optional uint32 token_duration_sec = 81;
        // -------------------------------------------------
        // child events
        // -------------------------------------------------
        repeated event sub_event = 100;
        // -------------------------------------------------
        // entity id and name
        // -------------------------------------------------
        // Deprecated: placeholder to fix rtld compilation
        // compilation errors
        // -------------------------------------------------
        optional string waf_instance_name = 201;
        // -------------------------------------------------
        // waf profile specific
        // -------------------------------------------------
        optional string waf_profile_id = 220;
        optional string waf_profile_name = 221;
        // -------------------------------------------------
        // Using enums defined in enforcement.proto
        // -------------------------------------------------
        optional uint32 waf_profile_action = 222;
        optional bytes waf_profile_type = 223;
        // -------------------------------------------------
        // scopes config sepcific
        // -------------------------------------------------
        optional string scope_config_id = 224;
        optional string scope_config_name = 225;
        // -------------------------------------------------
        // acl config specific
        // -------------------------------------------------
        optional string acl_config_id = 226;
        optional string acl_config_name = 227;
        // -------------------------------------------------
        // rules config specific
        // -------------------------------------------------
        optional string rules_config_id = 228;
        optional string rules_config_name = 229;
        // -------------------------------------------------
        // bots config specific
        // -------------------------------------------------
        optional string bots_config_id = 230;
        optional string bots_config_name = 231;
        optional string account_type = 232;
        optional string partner_id = 233;
        optional string response_header_name = 241;
        optional string ruleset_id = 242;
        optional string ruleset_version = 243;
        // -------------------------------------------------
        // change/rev info about config
        // -------------------------------------------------
        optional string config_last_modified = 250;
        // -------------------------------------------------
        // time taken by waf
        // -------------------------------------------------
        optional double waf_process_time_msec = 260;
}
//: ----------------------------------------------------------------------------
//: Bot event
//: ----------------------------------------------------------------------------
message bot_event
{
      optional event event = 1;
}
